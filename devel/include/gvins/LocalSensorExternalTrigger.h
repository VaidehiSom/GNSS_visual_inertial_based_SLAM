// Generated by gencpp from file gvins/LocalSensorExternalTrigger.msg
// DO NOT EDIT!


#ifndef GVINS_MESSAGE_LOCALSENSOREXTERNALTRIGGER_H
#define GVINS_MESSAGE_LOCALSENSOREXTERNALTRIGGER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace gvins
{
template <class ContainerAllocator>
struct LocalSensorExternalTrigger_
{
  typedef LocalSensorExternalTrigger_<ContainerAllocator> Type;

  LocalSensorExternalTrigger_()
    : header()
    , trigger_id(0)
    , event_id(0)
    , timestamp_host()  {
    }
  LocalSensorExternalTrigger_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , trigger_id(0)
    , event_id(0)
    , timestamp_host()  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _trigger_id_type;
  _trigger_id_type trigger_id;

   typedef uint32_t _event_id_type;
  _event_id_type event_id;

   typedef ros::Time _timestamp_host_type;
  _timestamp_host_type timestamp_host;





  typedef boost::shared_ptr< ::gvins::LocalSensorExternalTrigger_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gvins::LocalSensorExternalTrigger_<ContainerAllocator> const> ConstPtr;

}; // struct LocalSensorExternalTrigger_

typedef ::gvins::LocalSensorExternalTrigger_<std::allocator<void> > LocalSensorExternalTrigger;

typedef boost::shared_ptr< ::gvins::LocalSensorExternalTrigger > LocalSensorExternalTriggerPtr;
typedef boost::shared_ptr< ::gvins::LocalSensorExternalTrigger const> LocalSensorExternalTriggerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gvins::LocalSensorExternalTrigger_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gvins::LocalSensorExternalTrigger_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gvins::LocalSensorExternalTrigger_<ContainerAllocator1> & lhs, const ::gvins::LocalSensorExternalTrigger_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.trigger_id == rhs.trigger_id &&
    lhs.event_id == rhs.event_id &&
    lhs.timestamp_host == rhs.timestamp_host;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gvins::LocalSensorExternalTrigger_<ContainerAllocator1> & lhs, const ::gvins::LocalSensorExternalTrigger_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gvins

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gvins::LocalSensorExternalTrigger_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gvins::LocalSensorExternalTrigger_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gvins::LocalSensorExternalTrigger_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gvins::LocalSensorExternalTrigger_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gvins::LocalSensorExternalTrigger_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gvins::LocalSensorExternalTrigger_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gvins::LocalSensorExternalTrigger_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a5f284fbc0b54d0c397033867d8565f1";
  }

  static const char* value(const ::gvins::LocalSensorExternalTrigger_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa5f284fbc0b54d0cULL;
  static const uint64_t static_value2 = 0x397033867d8565f1ULL;
};

template<class ContainerAllocator>
struct DataType< ::gvins::LocalSensorExternalTrigger_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gvins/LocalSensorExternalTrigger";
  }

  static const char* value(const ::gvins::LocalSensorExternalTrigger_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gvins::LocalSensorExternalTrigger_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message contains essential time information of the \n"
"# local sensor (visual/inertial sensor) when get triggered\n"
"Header header   # local timestamp of the trigger\n"
"uint32                 trigger_id\n"
"uint32                 event_id\n"
"time                   timestamp_host       # corresponding timestamp of the Host PC, not used in GVINS\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::gvins::LocalSensorExternalTrigger_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gvins::LocalSensorExternalTrigger_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.trigger_id);
      stream.next(m.event_id);
      stream.next(m.timestamp_host);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LocalSensorExternalTrigger_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gvins::LocalSensorExternalTrigger_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gvins::LocalSensorExternalTrigger_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "trigger_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.trigger_id);
    s << indent << "event_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.event_id);
    s << indent << "timestamp_host: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp_host);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GVINS_MESSAGE_LOCALSENSOREXTERNALTRIGGER_H
